group 'im.octo'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven {
        name "Nexus Snapshots"
        url "https://nexus.octo.im/repository/maven-snapshots/"
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'im/octo/jungletree/rainforest/**',
                    'im/octo/jungletree/messaging/message/**'
            ])
        })
    }
}

project.ext.jacocoOfflineSourceSets = [ 'main' ]
task doJacocoOfflineInstrumentation(dependsOn: [ classes, project.configurations.jacocoAnt ]) {
    inputs.files classes.outputs.files
    File outputDir = new File(project.buildDir, 'instrumentedClasses')
    outputs.dir outputDir
    doFirst {
        project.delete(outputDir)
        ant.taskdef(
                resource: 'org/jacoco/ant/antlib.xml',
                classpath: project.configurations.jacocoAnt.asPath,
                uri: 'jacoco'
        )
        def instrumented = false
        jacocoOfflineSourceSets.each { sourceSetName ->
            if (file(sourceSets[sourceSetName].output.classesDir).exists()) {
                def instrumentedClassedDir = "${outputDir}/${sourceSetName}"
                ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
                    fileset(dir: sourceSets[sourceSetName].output.classesDir, includes: '**/*.class')
                }
                //Replace the classes dir in the test classpath with the instrumented one
                sourceSets.test.runtimeClasspath -= files(sourceSets[sourceSetName].output.classesDir)
                sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
                instrumented = true
            }
        }
        if (instrumented) {
            //Disable class verification based on https://github.com/jayway/powermock/issues/375
            test.jvmArgs += '-noverify'
        }
    }
}

check.dependsOn jacocoTestReport
test.dependsOn doJacocoOfflineInstrumentation

dependencies {
    compile project('rainforest')

    compile group: 'org.apache.activemq', name: 'activemq-core', version: '5.7.0'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.23'
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.23'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.6'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.6'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://nexus.octo.im/repository/maven-snapshots/") {
                authentication(userName: mavenUser, password: mavenPassword)
            }
            pom.version = project.version
            pom.artifactId = 'core'
            pom.groupId = "im.octo.jungletree"
        }
    }
}
