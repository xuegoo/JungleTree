buildscript {
    repositories {
        jcenter()
        maven {
            name 'jungletree-snapshots'
            url 'https://repo.jungletree.org/repository/jungletree-snapshots/'
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9

def jungleTreeNexusUsername = hasProperty('jungleTreeNexusUsername') ? jungleTreeNexusUsername : System.getenv('jungleTreeNexusUsername')
def jungleTreeNexusPassword = hasProperty('jungleTreeNexusPassword') ? jungleTreeNexusPassword : System.getenv('jungleTreeNexusPassword')

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'org.junit.platform.gradle.plugin'

    group 'org.jungletree'
    version '0.0.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9

    ext.junitPlatformVersion = '1.0.1'
    ext.junitJupiterVersion = '5.0.1'
    ext.log4jVersion = '2.9.0'

    repositories {
        jcenter()
        maven {
            name 'jungletree-snapshots'
            url 'https://repo.jungletree.org/repository/jungletree-snapshots/'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    junitPlatform {
        // platformVersion '1.0.1'
        filters {
            engines {
                // include 'junit-jupiter', 'junit-vintage'
                // exclude 'custom-engine'
            }
            tags {
                // include 'fast'
                exclude 'slow'
            }
        }
        logManager 'org.apache.logging.log4j.jul.LogManager'
    }

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

        // Needed as compile since we're building a JUnit Jupiter extension here
        compile('org.mockito:mockito-core:2.+')
        compile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")

        // Needed for @RunWith(JUnitPlatform.class) in the IDE
        testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

        // Only needed to run tests in an IDE that bundles an older version
        testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

        // To avoid compiler warnings about @API annotations in JUnit code
        compileOnly('org.apiguardian:apiguardian-api:1.0.0')
        testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')

        testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
        testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

        testCompile('org.mockito:mockito-core:2.+')
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

subprojects {
    afterEvaluate {
        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'junit',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }

        publishing {
            repositories {
                maven {
                    credentials {
                        username jungleTreeNexusUsername
                        password jungleTreeNexusPassword
                    }
                    if (version.endsWith('-SNAPSHOT')) {
                        url "https://repo.jungletree.org/repository/jungletree-snapshots"
                    } else {
                        url "https://repo.jungletree.org/repository/jungletree-releases"
                    }
                }
            }
            publications {
                mavenJava(MavenPublication) {
                    groupId group
                    artifactId "${moduleName.substring("jungletree.".length()).replace("\\.", "-")}"
                    version version

                    from components.java
                    artifact sourcesJar
                }
            }
        }
    }
}
